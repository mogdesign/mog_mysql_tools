#!/bin/bash
#
# Author: Miroslav Vadkerti <miro.vadkerti at mogdesign.eu>
#

# globals
VERSION="0.2 (Dark Hawk)"
TOOLNAME=${0#./}
SYSTEM_CONFIG="/etc/$TOOLNAME.conf"
USER_CONFIG="$HOME/.$TOOLNAME.conf"
COMMAND=$1
SUBCOMMAND=$2

# defaults
MYSQL_HOST="localhost"
MYSQL_PORT="3306"
DEF_HOST="localhost"

#
# helpers
#
print_info() {
  echo ":: $@"
}

print_error() {
  echo "Error: $@"
}

exit_error() {
  print_error "$@"
  exit 1
}

mysql_exec() {
  if [ -z "$1" ]; then
    mysql -u$MYSQL_USER -p$MYSQL_PASSWD -h$MYSQL_HOST \
      -P$MYSQL_PORT --skip-column-names
  else
    mysql -u$MYSQL_USER -p$MYSQL_PASSWD -h$MYSQL_HOST \
      -P$MYSQL_PORT --skip-column-names <<< "$@"
  fi
}

ask_user() {
  local INP=

  echo -n "$2: "
  read INP

  eval $1="$INP"
}

confirm() {
  local INP=

  [ -n "$CONFIRM" ] && return

  echo -n "$1 (y/n)? "

  read INP

  case $INP in
    y|Y)
      return
      ;;
    *)
      echo "Cancelled!"
      exit 1
  esac
}

#
# general functions
#
sanity_checks() {
  # check mandatory config
  [ -z "$MYSQL_USER" ] && exit_error "No MySQL admin user in configuration"
  [ -z "$MYSQL_PASSWD" ] && exit_error "No MySQL admin password in configuration"

  # check mysql connection

  # check admin account requirements
}

load_config() {
  # load system-wide config
  if [ -e "$SYSTEM_CONFIG" ]; then
    source $SYSTEM_CONFIG
  fi

  # load config from home directory
  if [ -e "$USER_CONFIG" ]; then
    source $USER_CONFIG
  fi

  if [ ! -e "$USER_CONFIG" -a ! -e "$SYSTEM_CONFIG" ]; then
    echo "No configuration file found. Please create $USER_CONFIG"
    echo "or $SYSTEM_CONFIG file with at least these variables:"
    echo
    echo "# mysql administrator username and password"
    echo "MYSQL_USR=username"
    echo "MYSQL_PASSWD=password"
    echo
    echo "Refer to program help for more information"
    exit 0
  fi
}


show_help() {
  echo "Usage: $TOOLNAME command [sub-command] [options]"
  echo
  echo "MySQL command line tool for managing users, databases and displaying"
  echo "various useful information from MySQL database."
  echo
  echo "Run command without parameters to get detailed help."
  echo
  echo "Available commands:"
  echo " user        Manage and list users"
  echo
  echo "Configuration file:"
  echo " The configuration file provides basic configuration for $TOOLNAME tool."
  echo " Global configuration file is located at \`$SYSTEM_CONFIG'. This can be"
  echo " overriden by local configuration file \`~/.myctl.conf'. Configuration file"
  echo " contains bash varibles sourced by the tool."
  echo
  echo " Mandatory variables:"
  echo " MYSQL_USER      - MySQL administrator username" 
  echo " MYSQL_PASSWD  - MySQL administrator password" 
  echo
  echo " Optional variables:"
  echo " MYSQL_HOST      - MySQL hostname (default: localhost)" 
  echo " MYSQL_PORT      - MySQL port (default: 3309)" 
  echo " DEF_HOST        - Default host to add user (default: localhost)"
  echo " DEF_PASSWD    - Default password for added user"
  echo
  exit 0
}

#
# user management
#

## add user
command_user_add() {
  local OPTIND= DB= DUMP= PASSWD= UNAME=
  local PASSWD=$DEF_PASSWD
  local OPTS="hd:f:H:p:"

  while getopts $OPTS arg; do
    case $arg in
      h)
        user_add_help
        ;;
      d)
        DB=$OPTARG
        ;;
      f)
        DUMP=$OPTARG
        ;;
      p)
        PASSWD=$OPTARG
        ;;
      *)
        exit 1
        ;;
    esac
  done

  shift $(($OPTIND-1))

  [ -z "$1" ] && exit_error "No username given"
  [ $# -ne 1 ] && exit_error "Too many parameters"
  [ -n "$DUMP" -a -z "$DB" ] && exit_error "No database given. Option -f requires -d"

  IFS=@ read UNAME HOST <<< "$1"
  [ -z "$HOST" ] && HOST=$DEF_HOST

  # check if user already exists
  command_user_list "$UNAME@$HOST" &> /dev/null && \
    exit_error "User $UNAME@$HOST already exists"

  # check if database already exists
  mysql_exec "show databases;" | egrep -q "^$DB$" && exit_error \
    "Database $DB already exists, cannot create"

  # check if 

  while [ -z "$PASSWD" ]; do
    ask_user PASSWD "Enter $UNAME@$HOST password"
  done

  # add user
  SQL="CREATE USER '$UNAME'@'$HOST' IDENTIFIED BY '$PASSWD';"
  mysql_exec "$SQL" || exit_error "Addin user failed"
  print_info "Added user $UNAME@$HOST with password $PASSWD"

  # add database
  if [ -n "$DB" ]; then
    SQL="CREATE DATABASE $DB"
    mysql_exec "$SQL" || exit_error "Creating database"
    print_info "Created database $DB"
    SQL="GRANT ALL ON $DB.* TO '$UNAME'@'$HOST';"
    mysql_exec "$SQL" || exit_error "Granting all privileges to database $DB"
    print_info "Granted all privileges for $UNAME@$HOST to $DB"
  fi

  if [ -n "$DUMP" ]; then
    file "$DUMP" | grep -q "gzip" && gzip < $DUMP || cat $DUMP | \
      mysql -u$MYSQL_USER -p$MYSQL_PASSWD -h$MYSQL_HOST $DB || exit_error \
        "Restoring dump $DUMP to $DB - unsupported format or corrupted file"
    print_info "Restored MySQL dump $DUMP to database $DB"
  fi
}

user_add_help() {
  echo "Usage: $TOOLNAME add [-d database] [-f dump] [-H host] [-p password] user[@host]"
  echo
  echo "Add new MySQL user who can connect from $DEF_HOST. Optionally specify other host, "
  echo "add also a new database and restore a MySQL dump from file."
  echo
  echo "Options:"
  echo " -d database       Create a user database with given name"
  echo " -f dump           Restore given dump to the database, requires -d"
  echo " -H host           Host user can authenticate from (default: $DEF_HOST)"
  echo " -p password       Use given password for user \
(default: ${DEF_PASSWD:-none, ask for password}"
  echo

  exit 0
}

## delete user
command_user_del() {
  local OPTIND= DBS= DALL=
  local OPTS="hDd:"

  while getopts $OPTS arg; do
    case $arg in
      h)
        user_del_help
        ;;
      d)
        DBS=$OPTARG
        ;;
      D)
        DALL=yes
        ;;
      *)
        exit 1
        ;;
    esac
  done

  shift $(($OPTIND-1))

  [ -z "$1" ] && exit_error "No username given"
  [ -n "$DBS" -a -n "$DALL" ] && exit_error \
    "Only one option for removing databases can be specified"

  IFS=@ read UNAME HOST <<< "$1"
  [ -z "$HOST" ] && HOST=$DEF_HOST

  # check if user already exists
  command_user_list "$UNAME@$HOST" &> /dev/null || \
    exit_error "User $UNAME@$HOST does not exits"

  # ask for confirmation
  confirm "Really remove MySQL user $UNAME@$HOST"

  # delete user
  SQL="DROP USER '$UNAME'@'$HOST';"
  mysql_exec "$SQL" || exit_error "Addin user failed"
  print_info "User $UNAME@$HOST removed"

  exit 0
}

user_del_help() {
  echo "Usage: $TOOLNAME del [-D] [-d db,..] user[@host]"
  echo
  echo "Add new MySQL user who can connect from $DEF_HOST. Optionally specify other host, "
  echo "add also a new database and restore a MySQL dump from file."
  echo
  echo "Options:"
  echo " -D                Remove all databases user has access to"
  echo " -d db,..          Remove one or more databases separated with a comma"
  echo

  exit 0
}

## list users
command_user_list() {
  local SQL= DATA= USER_HOST_DB= USR= HOST= DB= USRPREV= HOSTPREV= LIST=
  local FIRST= OPTIND=
  local OPTS="h"

  while getopts $OPTS arg; do
    case $arg in
      h)
        user_list_help
        ;;
      *)
        exit 1
        ;;
    esac
  done

  LIST=$(
    # get all users
    SQL="use mysql; SELECT DISTINCT user.user, user.host, db.db FROM user \
      left JOIN db ON user.user=db.user ORDER BY user, host, db"
    DATA=$(mysql_exec "$SQL")

    # for all users, hosts print their databases
    while read USER_HOST_DB; do
      read USR HOST DB <<< "$USER_HOST_DB"
      [ "$DB" = "NULL" ] && DB="(none)"
      if [ "$USR" = "$USRPREV" -a "$HOST" = "$HOSTPREV" ]; then
        echo -n "$DB "
        continue
      fi

      [ -z "$FIRST" ] && printf "%-40s%s" "$USR@$HOST" "$DB" || \
        printf "\n%-40s%s" "$USR@$HOST" "$DB "

      USRPREV=$USR
      HOSTPREV=$HOST
      FIRST="no"
    done <<< "$DATA" | sort | egrep "$1"
  )

  if [ -z "$LIST" ]; then
    echo "No data found"
    return 1
  fi

  {
    printf "%-40s%s\n" "User@Host" "Privileges to database(s)"
    printf "%80s\n" | tr ' ' -
    echo "$LIST"
  } | less -F
}

user_list_help() {
  echo "Usage: $TOOLNAME user list [regexp]"
  echo
  echo "List available mysql users with privilages to databases."
  echo "Currently the privileges are not distinguished."
  echo
  echo "Optionally a regexp can be passwd to filter out results."
  echo "This regexp is passwd to egrep directly."
  echo
  echo "Listed results are paged via less -F."

  exit 0
}

command_user() {
  echo "Usage: $TOOLNAME user [sub-command] [options]"
  echo
  echo "Available sub-commands:"
  echo "  add     Add new user"
  echo "  del     Delete user"
  echo "  list    List users with available databases"
  echo
  echo "Run sub-command with -h parameter to get detailed help."
  echo

  exit 0
}

#
# shell
#
command_shell() {
  local OPTS="h"

  while getopts $OPTS arg; do
    case $arg in
      h)
        shell_help
        ;;
      *)
        exit 1
        ;;
    esac
  done

  # run the shell
  [ -z "$SUBCOMMAND" ] && mysql_exec || mysql_exec "$@"

  return $?
}

shell_help() {
  echo "Usage: $TOOLNAME shell"
  echo
  echo "Get an administrator MySQL shell."
  echo

  exit 0
}


#
# main
#

# early help
{ [[ "$COMMAND" =~ (-h|--help) ]] || [ -z "$COMMAND" ]; } && show_help 

# answer yes
if [ "$COMMAND" = "-y" ]; then
  CONFIRM=yes
  shift
  COMMAND=$1
  SUBCOMMAND=$2
fi

# version
[[ "$COMMAND" =~ (-v|--version) ]] && { echo "Version: $VERSION"; exit 0; }

# load configuration
load_config

# sanity checks
sanity_checks

# shift away command and sub-command
shift 2

# execute give command specific function
if [ "$(type -t command_${COMMAND}_${SUBCOMMAND})" = function ]; then 
  command_${COMMAND}_${SUBCOMMAND} $@
  exit $?
elif [ "$(type -t command_${COMMAND})" = function ]; then
  command_$COMMAND $SUBCOMMAND $@
  exit $?
fi

exit_error "uknown command $COMMAND"

# vim: ai ts=2 sw=2 et
