#!/bin/bash
#
# Author: Miroslav Vadkerti <miro.vadkerti at mogdesign.eu>
#

# globals
VERSION="0.1 (Dark Hawk)"
TOOLNAME=${0#./}
SYSTEM_CONFIG="/etc/$TOOLNAME.conf"
USER_CONFIG="$HOME/.$TOOLNAME.conf"
COMMAND=$1
SUBCOMMAND=$2

# defaults
MYSQL_HOST="localhost"
MYSQL_PORT="3306"
DEF_HOST="localhost"

#
# helpers
#
exit_error() {
  echo "Error: $@"
  exit -1
}

#
# general functions
#
sanity_checks() {
  # check mandatory config
  [ -z "$MYSQL_USER" ] && exit_error "No admin user in configuration"
  [ -z "$MYSQL_PASSWORD" ] && exit_error "No admin password in configuration"

  # check mysql connection

  # check admin account requirements
}

load_config() {
  # load config from home directory
  if [ -e "$USER_CONFIG" ]; then
    source $USER_CONFIG
  # load system-wide config
  elif [ -e "$SYSTEM_CONFIG" ]; then
    source $SYSTEM_CONFIG
  else
    echo "No configuration file found. Please create $USER_CONFIG"
    echo "or $SYSTEM_CONFIG file with at least these variables:"
    echo
    echo "# mysql administrator username and password"
    echo "MYSQL_USER=username"
    echo "MYSQL_PASSWORD=password"
    echo
    echo "Refer to program help for more information"
    exit 0
  fi
}


show_help() {
  echo "Usage: $TOOLNAME command [sub-command] [options]"
  echo
  echo "MySQL command line tool for managing users, databases and displaying"
  echo "various useful information from MySQL database."
  echo
  echo "Run command without parameters to get detailed help."
  echo
  echo "Available commands:"
  echo " user        Manage and list users"
  echo
  echo "Configuration file:"
  echo " The configuration file provides basic configuration for $TOOLNAME tool."
  echo " Global configuration file is located at \`$SYSTEM_CONFIG'. This can be"
  echo " overriden by local configuration file \`~/.myctl.conf'. Configuration file"
  echo " contains bash varibles sourced by the tool."
  echo
  echo " Mandatory variables:"
  echo " MYSQL_USER      - MySQL administrator username" 
  echo " MYSQL_PASSWORD  - MySQL administrator password" 
  echo
  echo " Optional variables:"
  echo " MYSQL_HOST      - MySQL hostname (default: localhost)" 
  echo " MYSQL_PORT      - MySQL port (default: 3309)" 
  echo " DEF_HOST        - Default host to add user (default: localhost)"
  echo " DEF_PASSWORD    - Default password for added user"
  echo
  exit 0
}

#
# user management
#

## add user
command_user_add() {



  exit 0
}

user_add_help() {
  echo "Usage: $TOOLNAME add [-d database] [-f dump] [-h host] [-p password] name"
  echo
  echo "Add new MySQL user. Optionally add also a new database for the user restore"
  echo "database contents from given dump. "
  echo
  echo "Options:"
  echo " -p password       Use given password for user \
(default: ${DEF_PASSWORD:-none, ask for password}"

  exit 0
}

## delete user
command_user_del() {
  echo "Delete user"

  exit 0
}

## list users
command_user_list() {
  while getopts "h" arg; do
    case $arg in
      h)
        user_list_help
        ;;
      *)
        exit -1
        ;;
    esac
  done

  {
    printf "%-40s%s\n" "User@Host" "Database"
    printf "%80s\n" | tr ' ' -

    # get all users
    # local SQL="SELECT User from mysql.user"
    local SQL="SELECT DISTINCT user, host FROM mysql.db"
    USERS_HOSTS=$(mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h$MYSQL_HOST \
      -P$MYSQL_PORT --skip-column-names <<< "$SQL")

    # for all users, hosts print their databases
    while read USER_HOST; do
      read USER HOST <<< "$USER_HOST"
      [ -z "$USER" -o -z "$HOST" ] && continue
      SQL="SELECT db FROM mysql.db WHERE user='$USER' AND host='$HOST'"
      DBS=$(mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h$MYSQL_HOST \
          -P$MYSQL_PORT --skip-column-names <<< "$SQL")
      printf "%-40s" "$USER@$HOST"
      echo $DBS
    done <<< "$USERS_HOSTS" | sort | egrep "$1"
  } | less -F

  exit 0
}

user_list_help() {
  echo "Usage: $TOOLNAME user list"
  echo
  echo "List available mysql users with accessible databases."

  exit 0
}

command_user() {
  echo "Usage: $TOOLNAME user [sub-command] [options]"
  echo
  echo "Available sub-commands:"
  echo "  add     Add new user"
  echo "  del     Delete user"
  echo "  list    List users with available databases"
  echo
  echo "Run sub-command with -h parameter to get detailed help."
  echo
  exit 0
}

#
# shell
#
command_shell() {
  while getopts "h" arg; do
    case $arg in
      h)
        shell_help
        ;;
      *)
        exit -1
        ;;
    esac
  done

  # run the shell
  if [ -z "$SUBCOMMAND" ]; then
    mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h$MYSQL_HOST -P$MYSQL_PORT
  else
    echo $@ | mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h$MYSQL_HOST -P$MYSQL_PORT | less
  fi

  exit $?
}

shell_help() {
  echo "Usage: $TOOLNAME shell"
  echo
  echo "Get an administrator MySQL shell."
  echo

  exit 0
}


#
# main
#

# early help
{ [[ "$COMMAND" =~ (-h|--help) ]] || [ -z "$COMMAND" ]; } && show_help 

# version
[[ "$COMMAND" =~ (-v|--version) ]] && { echo "Version: $VERSION"; exit 0; }

# load configuration
load_config

# sanity checks
sanity_checks

# shift away command and sub-command
shift 2

# execute give command specific function
[ "$(type -t command_${COMMAND}_${SUBCOMMAND})" = function ] && command_${COMMAND}_${SUBCOMMAND} $@
[ "$(type -t command_${COMMAND})" = function ] && command_$COMMAND $SUBCOMMAND $@

exit_error "uknown command $COMMAND"

# vim: ai ts=2 sw=2 et
